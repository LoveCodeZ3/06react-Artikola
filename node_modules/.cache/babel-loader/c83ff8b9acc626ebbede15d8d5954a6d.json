{"ast":null,"code":"import actionTypes from \"../actions/actionType\";\nconst initState = {\n  isLoading: false,\n  list: [{\n    id: 1,\n    title: \"Lorem sit 111\",\n    desc: \"111 Lorem sit\",\n    hasRead: false\n  }, {\n    id: 2,\n    title: \"Lorem sit 222\",\n    desc: \"222 Lorem sit\",\n    hasRead: false\n  }]\n};\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.RECIVED_NOTIFICATIONS:\n      return { ...state,\n        list: action.payload.list\n      };\n    //可以出现等待2秒的 loading\n\n    case actionTypes.START_NOTIFICATION_POST:\n      return { ...state,\n        isLoading: true\n      };\n\n    case actionTypes.FINISH_NOTIFICATION_POST:\n      return { ...state,\n        isLoading: false\n      };\n\n    case actionTypes.MARK_NOTIFICATION_AS_READ_BY_ID:\n      const newlist = state.list.map(item => {\n        if (item.id === action.payload.id) {\n          item.hasRead = true;\n        }\n\n        return item;\n      });\n      return { ...state,\n        list: newlist\n      };\n\n    case actionTypes.MARK_ALL_NOTIFICATION_AS_READ:\n      const ALLlist = state.list.map(item => {\n        item.hasRead = true;\n        return item;\n      });\n      return { ...state,\n        list: ALLlist\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/kaituo/Downloads/06Artikola-administrado-master/src/reducers/notifications.js"],"names":["actionTypes","initState","isLoading","list","id","title","desc","hasRead","state","action","type","RECIVED_NOTIFICATIONS","payload","START_NOTIFICATION_POST","FINISH_NOTIFICATION_POST","MARK_NOTIFICATION_AS_READ_BY_ID","newlist","map","item","MARK_ALL_NOTIFICATION_AS_READ","ALLlist"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAC,KADI;AAEdC,EAAAA,IAAI,EAAC,CAAC;AACFC,IAAAA,EAAE,EAAC,CADD;AAEFC,IAAAA,KAAK,EAAC,eAFJ;AAGFC,IAAAA,IAAI,EAAC,eAHH;AAIFC,IAAAA,OAAO,EAAE;AAJP,GAAD,EAML;AACIH,IAAAA,EAAE,EAAC,CADP;AAEIC,IAAAA,KAAK,EAAC,eAFV;AAGIC,IAAAA,IAAI,EAAC,eAHT;AAIIC,IAAAA,OAAO,EAAE;AAJb,GANK;AAFS,CAAlB;AAgBA,gBAAe,CAACC,KAAK,GAAGP,SAAT,EAAoBQ,MAApB,KAA6B;AACxC,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKV,WAAW,CAACW,qBAAjB;AACI,aAAO,EAEH,GAAGH,KAFA;AAGHL,QAAAA,IAAI,EAACM,MAAM,CAACG,OAAP,CAAeT;AAHjB,OAAP;AAKJ;;AACA,SAAKH,WAAW,CAACa,uBAAjB;AACI,aAAM,EACF,GAAGL,KADD;AAEFN,QAAAA,SAAS,EAAC;AAFR,OAAN;;AAIA,SAAKF,WAAW,CAACc,wBAAjB;AACA,aAAM,EACF,GAAGN,KADD;AAEFN,QAAAA,SAAS,EAAC;AAFR,OAAN;;AAIJ,SAAKF,WAAW,CAACe,+BAAjB;AACI,YAAMC,OAAO,GAAER,KAAK,CAACL,IAAN,CAAWc,GAAX,CAAeC,IAAI,IAAE;AAChC,YAAGA,IAAI,CAACd,EAAL,KAAYK,MAAM,CAACG,OAAP,CAAeR,EAA9B,EAAiC;AAC7Bc,UAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACH;;AACD,eAAOW,IAAP;AACH,OALc,CAAf;AAMA,aAAM,EACF,GAAGV,KADD;AAEFL,QAAAA,IAAI,EAACa;AAFH,OAAN;;AAKA,SAAKhB,WAAW,CAACmB,6BAAjB;AACA,YAAMC,OAAO,GAAEZ,KAAK,CAACL,IAAN,CAAWc,GAAX,CAAeC,IAAI,IAAE;AAC5BA,QAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACJ,eAAOW,IAAP;AACH,OAHc,CAAf;AAIA,aAAM,EACF,GAAGV,KADD;AAEFL,QAAAA,IAAI,EAACiB;AAFH,OAAN;;AAKJ;AACI,aAAOZ,KAAP;AA1CR;AA4CH,CA7CD","sourcesContent":["import actionTypes from \"../actions/actionType\"\r\n\r\nconst initState = {\r\n    isLoading:false,\r\n    list:[{\r\n        id:1,\r\n        title:\"Lorem sit 111\",\r\n        desc:\"111 Lorem sit\",\r\n        hasRead: false\r\n    },\r\n    {\r\n        id:2,\r\n        title:\"Lorem sit 222\",\r\n        desc:\"222 Lorem sit\",\r\n        hasRead: false\r\n    }\r\n    ]\r\n}\r\nexport default (state = initState, action)=>{\r\n    switch(action.type){\r\n\r\n        case actionTypes.RECIVED_NOTIFICATIONS:\r\n            return {\r\n                \r\n                ...state,\r\n                list:action.payload.list,\r\n            }\r\n        //可以出现等待2秒的 loading\r\n        case actionTypes.START_NOTIFICATION_POST:\r\n            return{\r\n                ...state,\r\n                isLoading:true\r\n            }\r\n            case actionTypes.FINISH_NOTIFICATION_POST:\r\n            return{\r\n                ...state,\r\n                isLoading:false\r\n            }\r\n        case actionTypes.MARK_NOTIFICATION_AS_READ_BY_ID:\r\n            const newlist= state.list.map(item=>{\r\n                if(item.id === action.payload.id){\r\n                    item.hasRead = true\r\n                }\r\n                return item\r\n            })\r\n            return{\r\n                ...state,\r\n                list:newlist,\r\n                \r\n            }\r\n            case actionTypes.MARK_ALL_NOTIFICATION_AS_READ:\r\n            const ALLlist= state.list.map(item=>{\r\n                    item.hasRead = true\r\n                return item\r\n            })\r\n            return{\r\n                ...state,\r\n                list:ALLlist,\r\n                \r\n            }\r\n        default:\r\n            return state\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}