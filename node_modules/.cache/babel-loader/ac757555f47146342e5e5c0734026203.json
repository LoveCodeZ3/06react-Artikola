{"ast":null,"code":"import actionTypes from \"../actions/actionType\";\nconst initState = {\n  isLoading: false,\n  list: [{\n    id: 1,\n    title: \"Lorem sit 111\",\n    desc: \"111 Lorem sit\",\n    hasRead: false\n  }, {\n    id: 2,\n    title: \"Lorem sit 222\",\n    desc: \"222 Lorem sit\",\n    hasRead: false\n  }]\n};\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.RECIVED_NOTIFICATIONS:\n      return { ...state,\n        list: action.payload.list\n      };\n    //可以出现等待2秒的 loading\n\n    case actionTypes.START_NOTIFICATION_POST:\n      return { ...state,\n        isLoading: true\n      };\n\n    case actionTypes.FINISH_NOTIFICATION_POST:\n      return { ...state,\n        isLoading: false\n      };\n\n    case actionTypes.MARK_NOTIFICATION_AS_READ_BY_ID:\n      const newlist = state.list.map(item => {\n        if (item.id === action.payload.id) {\n          item.hasRead = true;\n        }\n\n        return item;\n      });\n      return { ...state,\n        list: newlist\n      };\n\n    case actionTypes.MARK_ALL_NOTIFICATION_AS_READ:\n      const ALLlist = state.list.map(item => {\n        item.hasRead = true;\n        return item;\n      });\n      return { ...state,\n        list: ALLlist\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/kaituo/Downloads/06Artikola-administrado-master/src/reducers/notifications.js"],"names":["actionTypes","initState","isLoading","list","id","title","desc","hasRead","state","action","type","RECIVED_NOTIFICATIONS","payload","START_NOTIFICATION_POST","FINISH_NOTIFICATION_POST","MARK_NOTIFICATION_AS_READ_BY_ID","newlist","map","item","MARK_ALL_NOTIFICATION_AS_READ","ALLlist"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,KADK;AAEhBC,EAAAA,IAAI,EAAE,CAAC;AACLC,IAAAA,EAAE,EAAE,CADC;AAELC,IAAAA,KAAK,EAAE,eAFF;AAGLC,IAAAA,IAAI,EAAE,eAHD;AAILC,IAAAA,OAAO,EAAE;AAJJ,GAAD,EAMJ;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,KAAK,EAAE,eAFT;AAGEC,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,OAAO,EAAE;AAJX,GANI;AAFU,CAAlB;AAgBA,gBAAe,CAACC,KAAK,GAAGP,SAAT,EAAoBQ,MAApB,KAA+B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKV,WAAW,CAACW,qBAAjB;AACE,aAAO,EAEL,GAAGH,KAFE;AAGLL,QAAAA,IAAI,EAAEM,MAAM,CAACG,OAAP,CAAeT;AAHhB,OAAP;AAKF;;AACA,SAAKH,WAAW,CAACa,uBAAjB;AACE,aAAO,EACL,GAAGL,KADE;AAELN,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKF,WAAW,CAACc,wBAAjB;AACE,aAAO,EACL,GAAGN,KADE;AAELN,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKF,WAAW,CAACe,+BAAjB;AACE,YAAMC,OAAO,GAAGR,KAAK,CAACL,IAAN,CAAWc,GAAX,CAAeC,IAAI,IAAI;AACrC,YAAIA,IAAI,CAACd,EAAL,KAAYK,MAAM,CAACG,OAAP,CAAeR,EAA/B,EAAmC;AACjCc,UAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACD;;AACD,eAAOW,IAAP;AACD,OALe,CAAhB;AAMA,aAAO,EACL,GAAGV,KADE;AAELL,QAAAA,IAAI,EAAEa;AAFD,OAAP;;AAKF,SAAKhB,WAAW,CAACmB,6BAAjB;AACE,YAAMC,OAAO,GAAGZ,KAAK,CAACL,IAAN,CAAWc,GAAX,CAAeC,IAAI,IAAI;AACrCA,QAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACA,eAAOW,IAAP;AACD,OAHe,CAAhB;AAIA,aAAO,EACL,GAAGV,KADE;AAELL,QAAAA,IAAI,EAAEiB;AAFD,OAAP;;AAKF;AACE,aAAOZ,KAAP;AA1CJ;AA4CD,CA7CD","sourcesContent":["import actionTypes from \"../actions/actionType\"\r\n\r\nconst initState = {\r\n  isLoading: false,\r\n  list: [{\r\n    id: 1,\r\n    title: \"Lorem sit 111\",\r\n    desc: \"111 Lorem sit\",\r\n    hasRead: false\r\n  },\r\n    {\r\n      id: 2,\r\n      title: \"Lorem sit 222\",\r\n      desc: \"222 Lorem sit\",\r\n      hasRead: false\r\n    }\r\n  ]\r\n}\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n\r\n    case actionTypes.RECIVED_NOTIFICATIONS:\r\n      return {\r\n\r\n        ...state,\r\n        list: action.payload.list,\r\n      }\r\n    //可以出现等待2秒的 loading\r\n    case actionTypes.START_NOTIFICATION_POST:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      }\r\n    case actionTypes.FINISH_NOTIFICATION_POST:\r\n      return {\r\n        ...state,\r\n        isLoading: false\r\n      }\r\n    case actionTypes.MARK_NOTIFICATION_AS_READ_BY_ID:\r\n      const newlist = state.list.map(item => {\r\n        if (item.id === action.payload.id) {\r\n          item.hasRead = true\r\n        }\r\n        return item\r\n      })\r\n      return {\r\n        ...state,\r\n        list: newlist,\r\n\r\n      }\r\n    case actionTypes.MARK_ALL_NOTIFICATION_AS_READ:\r\n      const ALLlist = state.list.map(item => {\r\n        item.hasRead = true\r\n        return item\r\n      })\r\n      return {\r\n        ...state,\r\n        list: ALLlist,\r\n\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n} "]},"metadata":{},"sourceType":"module"}